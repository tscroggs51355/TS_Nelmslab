#!/bin/bash
#SBATCH --job-name=demultiplex_moveUMI  # Job name
#SBATCH --partition=batch              # Partition (queue) name, i.e., highmem_p
#SBATCH --ntasks=1                          # Run a single task
#SBATCH --cpus-per-task=28                  # Number of CPU cores per task
#SBATCH --mem=120gb                       # Job memory request
#SBATCH --time=72:00:00                     # Time limit hrs:min:sec
#SBATCH --output=demultiplexout         # Standard output log
#SBATCH --error=demultiplexerror          # Standard error log
#SBATCH --mail-type=END,FAIL                # Mail events (NONE, BEGIN, END, FAIL, ALL)
#SBATCH --mail-user=taylor.strayhorn@uga.edu   # Where to send mail
#SBATCH --export=NONE                       # do not load any env variables to compute node

module load fastp/0.23.2
module load FASTX-Toolkit/0.0.14-GCCcore-8.3.0

mkdir "Mapped_Data"
mkdir "Mapped_Data/demultiplexed"

for file in "Raw_Data/"*_R1_*.gz
do
	file2="${file:9:-16}"

	fastp -w 4 -i "$file" -I "Raw_Data/""$file2""_R2_001.fastq.gz" -o "Mapped_Data/demultiplexed/umi_""$file2""_R1.fastq.gz" -O "Mapped_Data/demultiplexed/umi_""$file2""_R2.fastq.gz" -A -Q -L -G --umi --umi_loc read2 --umi_len 10 --umi_prefix UMI

	fastq-multx -b -B "CELseq_barcodes.txt" -m 0 "Mapped_Data/demultiplexed/umi_""$file2""_R2.fastq.gz" "Mapped_Data/demultiplexed/umi_""$file2""_R1.fastq.gz" -o "Mapped_Data/demultiplexed/""$file2""_%_R2.fastq.gz" "Mapped_Data/demultiplexed/""$file2""_%.fastq.gz"  # Split read 2 file by CELseq barcodes. Require perfect match to barcode in expected location

	find "Mapped_Data/demultiplexed/" -name "umi_*" -delete
	find "Mapped_Data/demultiplexed/" -name "*s_R2*" -delete
done
